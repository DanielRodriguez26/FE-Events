version: '3.8'

services:
    # Base de datos PostgreSQL
    postgres:
        image: postgres:15-alpine
        container_name: miseventos-db
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-miseventos}
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
        ports:
            - '${POSTGRES_PORT:-5432}:5432'
        networks:
            - miseventos-network
        restart: unless-stopped
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-miseventos}']
            interval: 10s
            timeout: 5s
            retries: 5

    # Backend API (FastAPI)
    backend:
        build:
            context: ../backend
            dockerfile: Dockerfile
        container_name: miseventos-backend
        environment:
            DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-miseventos}
            SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
            ALGORITHM: ${ALGORITHM:-HS256}
            ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
            REDIS_URL: redis://redis:6379
            ENVIRONMENT: ${ENVIRONMENT:-production}
        volumes:
            - ./logs:/app/logs
        ports:
            - '${BACKEND_PORT:-8000}:8000'
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_started
        networks:
            - miseventos-network
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Frontend (React)
    frontend:
        build:
            context: .
            dockerfile: Dockerfile
            args:
                - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
                - VITE_APP_NAME=${VITE_APP_NAME:-Mis Eventos}
        container_name: miseventos-frontend
        environment:
            - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
            - VITE_APP_NAME=${VITE_APP_NAME:-Mis Eventos}
        ports:
            - '${FRONTEND_PORT:-3000}:80'
        depends_on:
            backend:
                condition: service_healthy
        networks:
            - miseventos-network
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost/']
            interval: 30s
            timeout: 10s
            retries: 3

    # Redis para cach√© y sesiones
    redis:
        image: redis:7-alpine
        container_name: miseventos-redis
        command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
        ports:
            - '${REDIS_PORT:-6379}:6379'
        volumes:
            - redis_data:/data
        networks:
            - miseventos-network
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 10s
            timeout: 5s
            retries: 5

    # Nginx como proxy reverso
    nginx:
        image: nginx:alpine
        container_name: miseventos-nginx
        ports:
            - '${NGINX_HTTP_PORT:-80}:80'
            - '${NGINX_HTTPS_PORT:-443}:443'
        volumes:
            - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
            - ./ssl:/etc/nginx/ssl:ro
            - nginx_logs:/var/log/nginx
        depends_on:
            frontend:
                condition: service_healthy
            backend:
                condition: service_healthy
        networks:
            - miseventos-network
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost/']
            interval: 30s
            timeout: 10s
            retries: 3

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local
    nginx_logs:
        driver: local

networks:
    miseventos-network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16
